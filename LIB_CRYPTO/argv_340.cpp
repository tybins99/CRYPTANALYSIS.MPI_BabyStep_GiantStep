#include "../LIB_CRYPTO/argv_775.hpp"

void argv_1112 (argv_876 _msg) {
	FILE * fp_crash = fopen ("C:\\argv_1112.txt", "ab");
	if (fp_crash) {
		fprintf (fp_crash, "%s\r\n", _msg);
		fclose (fp_crash);
	}
}

void argv_4387 () {
	FILE * fp_crash = fopen ("C:\\argv_1112.txt", "wb");
	if (fp_crash) {
		fclose (fp_crash);
	}
}

argv_1138::argv_1138 () {
	argv_1884 = NULL;
	argv_1909.init (argv_4528);
}

void argv_1138::init (argv_893 * _gmp_tool_ptr, FILE * _fp_log) {
	argv_1576			= _fp_log;	
	argv_1884	= _gmp_tool_ptr;
}

void argv_1138::argv_1076 (argv_3530 _modulo, argv_3530 _result) {
	argv_1884->argv_1609 (_result, _modulo);      // sqrt of the size of the group
	argv_1884->argv_1581 (_result, _result, 1); // ceil
	string modulo_str	= argv_1884->argv_4985 (_modulo);
	string order_str	= argv_1884->argv_4985 (_result);
	fprintf (argv_1576, "Number of elements in group : %s => argv_3690 = %s\r\n", modulo_str.c_str(), order_str.c_str());
}

void argv_1138::argv_775 (argv_3530 _generator, argv_3530 _modulo, argv_3530 _order) {
	argv_3530 argv_4406, iterator;
	argv_1884->argv_1594 (argv_4406);
	argv_1884->argv_1594 (iterator);
	argv_1884->argv_1606 (iterator,	"0", 10);
	argv_4883 unused_index;
	string key_str;
	string value_str;

	while (argv_1884->argv_1585 (iterator, _order) < 0) {
		argv_1884->argv_1604 (argv_4406, _generator, iterator, _modulo);
		key_str		= argv_1884->argv_4985 (argv_4406);
		value_str	= argv_1884->argv_4985 (iterator);
		argv_1909.argv_650 (key_str.c_str(), value_str.c_str(), unused_index);
		//fprintf (argv_1576, "argv_650(%s,%s)\r\n", key_str.c_str(), value_str.c_str());
		argv_1884->argv_1581 (iterator, iterator, 1);	
	}
	argv_1884->argv_1583 (argv_4406);
	argv_1884->argv_1583 (iterator);
}

// argv_793 = (alpha exp x) mod argv_3690
void argv_1138::argv_1797 (argv_3530 _beta, argv_3530 _order, argv_3530 _precomputed_inverse, argv_3530 _modulo, argv_3530 _result) {
	fprintf (argv_1576, "argv_1138::argv_1797...[IN]\r\n");
	argv_3530 y, alpha_invert_powered, nb_todo, iterator, found_value;
	argv_1884->argv_1594 (y);
	argv_1884->argv_1594 (alpha_invert_powered);
	argv_1884->argv_1594 (nb_todo);
	argv_1884->argv_1594 (iterator);
	argv_1884->argv_1594 (found_value);

	// argv_4406 = 0
	argv_1884->argv_1606 (_result,	"0", 10);
	// alpha_invert_powered = 1;
	argv_1884->argv_1606 (alpha_invert_powered,	"1", 10);
	// y = argv_793
	argv_1884->fp_mpz_set (y, _beta);
	// nb_todo = argv_3690 - 1
	argv_1884->argv_1611 (nb_todo, _order, 1);

	string y_str, found_value_str;
	argv_4883 unused_index;
	bool found = false;

	string str_tmp = argv_1884->argv_4985 (_precomputed_inverse);
	fprintf (argv_1576, "precomputed_inverse=%s\r\n", str_tmp.c_str());

	while (argv_1884->argv_1585 (iterator, nb_todo) < 0) {
		y_str = argv_1884->argv_4985 (y);
		fprintf (argv_1576, "y=%s\r\n", y_str.c_str());

		if (argv_1909.argv_2089 (y_str.c_str(), found_value_str, unused_index) == true) {
			// compute (i*m)+j	
			argv_1884->argv_1606 (found_value,	found_value_str.c_str(), 10);
			argv_1884->argv_1599 (_result, iterator, _order);
			argv_1884->argv_1580 (_result, _result, found_value);
			found = true;
			break;
		}
		else { // argv_4979 not found yet
			//y = (y * _precomputed_inverse) % _modulo;
			argv_1884->argv_1599 (y, y, _precomputed_inverse);
			string stmp = argv_1884->argv_4985 (y);
			argv_1884->argv_1598 (y, y, _modulo);
			stmp = argv_1884->argv_4985 (y);
		}
		argv_1884->argv_1581 (iterator, iterator, 1);
	}

	argv_1884->argv_1583 (y);
	argv_1884->argv_1583 (alpha_invert_powered);
	argv_1884->argv_1583 (nb_todo);
	argv_1884->argv_1583 (iterator);
	argv_1884->argv_1583 (found_value);

	if (found == true) {
		string result_str = argv_1884->argv_4985 (_result);
		fprintf (argv_1576, "argv_1138::argv_1797...[FOUND: argv_4406 = %s]\r\n", result_str.c_str());
	}
	else {
		fprintf (argv_1576, "argv_1138::argv_1797...[NOT_FOUND]\r\n");
	}
}

// _generator	: a small integer that can generate all possible integers
//                using only the exponentiation operator
// _modulo		: the size of the group generated by '_generator'
// _beta		: the argv_4406 of the exponentiation : argv_793 = (argv_1749 ^ x)
//				  x being the argv_4979 to find.
//
// _result		: the argv_4979 of x found using the baby step/giant step algorithm.
bool argv_1138::argv_4389 (argv_3530 _generator, argv_3530 _modulo, argv_3530 _beta, argv_3530 _result) {
	bool bret = false;
	argv_3530 argv_3690, negative_order, precomputed_inverse;
	argv_1884->argv_1594 (argv_3690);
	argv_1884->argv_1594 (negative_order);
	argv_1884->argv_1594 (precomputed_inverse); // i.e: alpha ^ (- argv_3690)

	argv_1076 (_modulo, argv_3690);
	argv_775 (_generator, _modulo, argv_3690);

	// negative_order = (-1) * argv_3690
	argv_1884->argv_1601 (negative_order, argv_3690); 
	// precomputed_inverse = alpha ^ negative_order
	argv_1884->argv_1604 (precomputed_inverse, _generator, negative_order, _modulo);
	argv_1797 (_beta, argv_3690, precomputed_inverse, _modulo, _result);

	argv_1884->argv_1583 (argv_3690);
	argv_1884->argv_1583 (negative_order);
	argv_1884->argv_1583 (precomputed_inverse);
	return (bret);
}

bool argv_1138::argv_926 () {
	bool bret = true;
	fprintf (argv_1576, "argv_1138::argv_926..[IN]\r\n");

	argv_3530 argv_2556, argv_1749, argv_928, argv_793, argv_4406;
	argv_1884->argv_1594 (argv_2556);
	argv_1884->argv_1594 (argv_1749);
	argv_1884->argv_1594 (argv_4406);
	argv_1884->argv_1594 (argv_928);
	argv_1884->argv_1594 (argv_793);

	argv_1884->argv_1606 (argv_2556,			"65371"	, 10);
	argv_1884->argv_1606 (argv_1749,		"3"		, 10);
	argv_1884->argv_1606 (argv_928,	"3281"	, 10);
	// argv_793 = (argv_1749 ^ exponent) mod argv_2556
	argv_1884->argv_1604 (argv_793, argv_1749, argv_928, argv_2556);
	string beta_str = argv_1884->argv_4985 (argv_793);
	fprintf (stderr, "argv_793 = %s\r\n", beta_str.c_str());
	argv_4389 (argv_1749, argv_2556, argv_793, argv_4406);
	string result_str = argv_1884->argv_4985 (argv_4406);
	fprintf (stderr, "found argv_4406 = %s\r\n", result_str.c_str());

	argv_1884->argv_1583 (argv_2556);
	argv_1884->argv_1583 (argv_1749);
	argv_1884->argv_1583 (argv_4406);
	argv_1884->argv_1583 (argv_928);
	argv_1884->argv_1583 (argv_793);
	return (bret);
}
